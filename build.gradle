buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://download.crashlytics.com/maven"
        }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.3.0"
        classpath "com.crashlytics.tools.gradle:crashlytics-gradle:1.14.7"
        classpath "com.jakewharton.sdkmanager:gradle-plugin:0.12.0"
    }
}

apply plugin: "android-sdk-manager"
apply plugin: "com.android.application"
apply plugin: "crashlytics"

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    signingConfigs {
        release {
            def signingFile = file("signing.properties")
            def signingProperties = new Properties()

            if (signingFile.exists()) {
                signingProperties.load(signingFile.newInputStream())

                storeFile file(signingProperties["keystore.file"])
                storePassword signingProperties["keystore.password"]
                keyAlias signingProperties["key.alias"]
                keyPassword signingProperties["key.password"]
            }
        }
    }



    defaultConfig {
        def versionMajor = 1
        def versionMinor = 4
        def versionPatch = 0

        versionName buildVersionName(versionMajor, versionMinor, versionPatch)
        versionCode buildVersionCode(versionMajor, versionMinor, versionPatch)

        minSdkVersion 14
        targetSdkVersion 23

        def apiFile = file("api.properties")
        def apiProperties = new Properties()

        if (apiFile.exists()) {
            apiProperties.load(apiFile.newInputStream())

            buildConfigField "String", "API_URL_AMAHI", formatStringField(apiProperties["url.amahi"])
            buildConfigField "String", "API_URL_PROXY", formatStringField(apiProperties["url.proxy"])
            buildConfigField "String", "API_CLIENT_ID", formatStringField(apiProperties["client.id"])
            buildConfigField "String", "API_CLIENT_SECRET", formatStringField(apiProperties["client.secret"])
        }
    }

    buildTypes {
        betaRelease {
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
        }
    }
}

def buildVersionName(versionMajor, versionMinor, versionPatch) {
    return "${versionMajor}.${versionMinor}.${versionPatch}"
}

def buildVersionCode(versionMajor, versionMinor, versionPatch) {
    return versionMajor * 10 ** 2 + versionMinor * 10 ** 1 + versionPatch * 10 ** 0
}

def formatStringField(field) {
    return "\"${field}\""
}

dependencies {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "http://download.crashlytics.com/maven"
        }
    }

    compile "com.android.support:support-v4:23.1.1"
    compile "com.android.support:support-v13:23.1.1"
    compile "com.crashlytics.android:crashlytics:1.1.13"
    compile "com.github.dmytrodanylyk.android-process-button:library:1.0.3"
    compile "com.jakewharton.byteunits:byteunits:0.9.0"
    compile "com.jakewharton.timber:timber:2.5.1"
    compile "com.squareup.dagger:dagger:1.2.2"
    compile "com.squareup.okhttp:okhttp:2.2.0"
    compile "com.squareup.okhttp:okhttp-urlconnection:2.2.0"
    compile "com.squareup:otto:1.3.6"
    compile "com.squareup.picasso:picasso:2.5.0"
    compile "com.squareup.retrofit:retrofit:1.9.0"
    compile "org.videolan:libvlc:1.1.2"

    provided "com.squareup.dagger:dagger-compiler:1.2.2"
}

task generateWrapper(type: Wrapper) {
    description "Generates Gradle wrapper."

    gradleVersion = "2.2.1"
}

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()

    task("generate${variantName}Javadoc", type: Javadoc) {
        description "Generates ${variantName} documentation."

        source = files(variant.javaCompile.source)

        ext.androidClasspath = android.getBootClasspath().join(File.pathSeparator)
        classpath = files(variant.javaCompile.classpath, ext.androidClasspath)

        options {
            linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
        }
    }
}
